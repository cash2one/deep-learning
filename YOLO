最近读了一篇大神的大作《You Only Look Once:Unified, Real-Time Object Detection》，试着写一下学到的东西。
YOLO是在物体检测领域最新的一篇文章，在识别速度方面现在是state-of-art级别。能达到45fps,faster YOLO能达到150fps。
首先说一下目标检测的三个指标：识别精度、识别效率、定位准确性。
识别精度是用mAP（mean average precision）来衡量。
YOLO就是在识别效率方面发力的一篇大神级文章。
一. YOLO与R-CNN不同的地方：
R-CNN处理区域块是用的图片分割，把图片分成2K个小图片，在小图片上进行目标的识别，而YOLO是直接操作一整张原图，在原图上划出若干个格子。
R-CNN处理一张图片用上千个网络综合出结果，而YOLO就用一个网络，直接出结果。
R-CNN的流程是先确定bounding box,然后用CNN训练特征（4096维），然后用每个类别的SVM得到属于某个类别的概率。
YOLO是在CNN中直接生成回归bounding box的参数和某区域属于所有类别中某一个的概率。
所有YOLO的速度是R-CNN的1000倍，是FASTER R-CNN的100倍。完全可以达到实时检测级别。
二. YOLO的基本原理

YOLO是把图片分成S×S个网格，若某物体的中心落在该网格内，就用该网格负责该物体的识别。
在每个网格中有B个边界框（bounding box），用来圈出物体的范围。每个边界框需要预测五个值（x,y,w,h,confidence）。
x,y是边界框中心点的坐标。w,h是边界框的长和高。confidence是边界框内是某物体的置信度。
confidence=P(object)*IOU(truth,pred)，其中P(object)是网格内有无目标物体的情况（若有则为1，否则为0）
IOU(truth,pred)是边界框区域与已经标注的物体范围的IOU值
解释一下IOU：设有A、B两个区域，则IOU(A,B)=（A交B）/（A并B）即为重叠区域与并集的比例。
除此之外，每个网格还要预测一个目标物体的类别信息C，即网格内物体属于某个类别的概率。
所以网络要预测的值的个数为：S×S×（B×5+C）个，即网络的输出为S×S×[(B*5+C)]shape的三维矩阵。
但是每个网格里会有多个边界框，算法希望每个边界框只预测一个种类（这也是YOLO的弊端之一），所有每个边界框只预测与它有最大IOU的那个标记区域对应的种类。

三. YOLO的缺点
1.在YOLO中，最多只能识别S×S个物体，因为每个网格就只判断一个物体，这样导致图像内物体很多的时候，会遗漏一些。
2.在每个网格中B设置的是2，这样就会导致很多小的物体识别不出来...
以上两点也是SSD算法主要改进的两点，SSD算法以后再写一下。

四. YOLO的开源框架

YOLO的源代码已经被大神开源，darknet，官网：http://pjreddie.com/darknet/
在里面下载源码安装一下就可以了，里面也有一些例子可以尝试。
但是从我的测试看，YOLO的运行时间好像也没有那么短，一个图片在8秒左右，视频就跟慢了，0.1fps。可能是我用CPU运行的原因，等下用GPU试一下。


**这里插播几句**
在运行YOLO之前我先安装了opencv 和CUDA
安装opencv的时候，去观望下载一个opencv3.0.zip，解压之后，直接make,make install就可以了。
但是出了个问题，在运行的时候报了一个错，找不到libopencv_highgui.so.3.0，但是我find了一下，在/usr/local/lib/里面
在/etc/ld.so。conf.d/中写了一个文件opencv.conf，吧路径写进去了，运行一下sudo ldconf 就可以了，不知道什么原因。。。

然后按抓给你CUDA，这是NVIDIA的一个运行GPU跑程序的库...
先用 uname -m && cat /etc/*release 查看一下系统情况，我的是x86_64的架构
去官网(https://developer.nvidia.com/cuda-downloads)下载对应的deb包就可以了，
`sudo dpkg -i cuda-repo-ubuntu1404-8-0-local_8.0.44-1_amd64.deb`
`sudo apt-get update`
`sudo apt-get install cuda`
以上是官网给的安装命令。。。
**插播完毕**
